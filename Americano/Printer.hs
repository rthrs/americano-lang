{-# LANGUAGE FlexibleInstances, OverlappingInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for Americano.Printer.
--   Generated by the BNF converter.

module Americano.Printer where

import Americano.Syntax
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Ident where
  prt _ (Ident i) = doc (showString i)

instance Print Program where
  prt i e = case e of
    Prog phrases -> prPrec i 0 (concatD [prt 0 phrases])

instance Print Phrase where
  prt i e = case e of
    PDecl decl -> prPrec i 0 (concatD [prt 0 decl])
    PStmt stmt -> prPrec i 0 (concatD [prt 0 stmt])
    PExpr expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])
    PBlock block -> prPrec i 0 (concatD [prt 0 block])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Block where
  prt i e = case e of
    Block phrases -> prPrec i 0 (concatD [doc (showString "{"), prt 0 phrases, doc (showString "}")])

instance Print [Phrase] where
  prt = prtList

instance Print Decl where
  prt i e = case e of
    DVar typeb items -> prPrec i 0 (concatD [prt 0 typeb, prt 0 items, doc (showString ";")])
    DFun typeb id dargs block -> prPrec i 0 (concatD [prt 0 typeb, prt 0 id, doc (showString "("), prt 0 dargs, doc (showString ")"), prt 0 block])

instance Print Item where
  prt i e = case e of
    DNoInit id -> prPrec i 0 (concatD [prt 0 id])
    DInit id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Item] where
  prt = prtList

instance Print DArg where
  prt i e = case e of
    DArg typeb id -> prPrec i 0 (concatD [prt 0 typeb, prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [DArg] where
  prt = prtList

instance Print TypeB where
  prt i e = case e of
    TComplex typec -> prPrec i 0 (concatD [prt 0 typec])
    TPrimitive typep -> prPrec i 0 (concatD [prt 0 typep])
    Fun typeb typebs -> prPrec i 0 (concatD [prt 0 typeb, doc (showString "("), prt 0 typebs, doc (showString ")")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [TypeB] where
  prt = prtList

instance Print TypeP where
  prt i e = case e of
    TInt -> prPrec i 0 (concatD [doc (showString "int")])
    TString -> prPrec i 0 (concatD [doc (showString "string")])
    TBool -> prPrec i 0 (concatD [doc (showString "bool")])
    TVoid -> prPrec i 0 (concatD [doc (showString "void")])

instance Print TypeC where
  prt i e = case e of
    TArray typeb -> prPrec i 0 (concatD [prt 0 typeb, doc (showString "[]")])
    TDict typedv typedk -> prPrec i 0 (concatD [prt 0 typedv, doc (showString "{"), prt 0 typedk, doc (showString "}")])

instance Print TypeDK where
  prt i e = case e of
    TDictKey typep -> prPrec i 0 (concatD [prt 0 typep])

instance Print TypeDV where
  prt i e = case e of
    TDictVal typeb -> prPrec i 0 (concatD [prt 0 typeb])

instance Print Stmt where
  prt i e = case e of
    SEmpty -> prPrec i 0 (concatD [doc (showString ";")])
    SBreak -> prPrec i 0 (concatD [doc (showString "break"), doc (showString ";")])
    SContinue -> prPrec i 0 (concatD [doc (showString "continue"), doc (showString ";")])
    SReturn -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    SValReturn expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr, doc (showString ";")])
    SCond expr phrase -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 phrase])
    SCondElse expr phrase1 phrase2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 phrase1, doc (showString "else"), prt 0 phrase2])
    SWhile expr phrase -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 phrase])
    SPrint expr -> prPrec i 0 (concatD [doc (showString "print"), prt 1 expr, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Stmt] where
  prt = prtList

instance Print CInit where
  prt i e = case e of
    InitArrEmp -> prPrec i 0 (concatD [doc (showString "[]")])
    InitArr exprs -> prPrec i 0 (concatD [doc (showString "["), prt 0 exprs, doc (showString "]")])
    InitDict dkeyvals -> prPrec i 0 (concatD [doc (showString "({"), prt 0 dkeyvals, doc (showString "})")])

instance Print DKeyVal where
  prt i e = case e of
    DictKeyVal expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString ":"), prt 1 expr2])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [DKeyVal] where
  prt = prtList

instance Print LVal where
  prt i e = case e of
    LVar id -> prPrec i 0 (concatD [prt 0 id])
    LArr lval expr -> prPrec i 0 (concatD [prt 0 lval, doc (showString "["), prt 4 expr, doc (showString "]")])
    LDict lval expr -> prPrec i 0 (concatD [prt 0 lval, doc (showString "{"), prt 1 expr, doc (showString "}")])

instance Print Expr where
  prt i e = case e of
    ELVal lval -> prPrec i 9 (concatD [prt 0 lval])
    ECInit cinit -> prPrec i 8 (concatD [prt 0 cinit])
    EIncr lval -> prPrec i 8 (concatD [prt 0 lval, doc (showString "++")])
    EDecr lval -> prPrec i 8 (concatD [prt 0 lval, doc (showString "--")])
    ELitInt n -> prPrec i 7 (concatD [prt 0 n])
    ELitTrue -> prPrec i 7 (concatD [doc (showString "true")])
    ELitFalse -> prPrec i 7 (concatD [doc (showString "false")])
    ELitString str -> prPrec i 7 (concatD [prt 0 str])
    EApp id exprs -> prPrec i 7 (concatD [prt 0 id, doc (showString "("), prt 0 exprs, doc (showString ")")])
    ENeg expr -> prPrec i 6 (concatD [doc (showString "-"), prt 7 expr])
    ENot expr -> prPrec i 6 (concatD [doc (showString "!"), prt 7 expr])
    EMul expr1 mulop expr2 -> prPrec i 5 (concatD [prt 5 expr1, prt 0 mulop, prt 6 expr2])
    EAdd expr1 addop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 addop, prt 5 expr2])
    ERel expr1 relop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 relop, prt 4 expr2])
    EAnd expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString "&&"), prt 2 expr2])
    EOr expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "||"), prt 1 expr2])
    EAss lval assop expr -> prPrec i 0 (concatD [prt 0 lval, prt 0 assop, prt 0 expr])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Expr] where
  prt = prtList

instance Print AddOp where
  prt i e = case e of
    OpPlus -> prPrec i 0 (concatD [doc (showString "+")])
    OpMinus -> prPrec i 0 (concatD [doc (showString "-")])

instance Print MulOp where
  prt i e = case e of
    OpTimes -> prPrec i 0 (concatD [doc (showString "*")])
    OpDiv -> prPrec i 0 (concatD [doc (showString "/")])
    OpMod -> prPrec i 0 (concatD [doc (showString "%")])

instance Print RelOp where
  prt i e = case e of
    OpLt -> prPrec i 0 (concatD [doc (showString "<")])
    OpLte -> prPrec i 0 (concatD [doc (showString "<=")])
    OpGt -> prPrec i 0 (concatD [doc (showString ">")])
    OpGte -> prPrec i 0 (concatD [doc (showString ">=")])
    OpEq -> prPrec i 0 (concatD [doc (showString "==")])
    OpNeq -> prPrec i 0 (concatD [doc (showString "!=")])

instance Print AssOp where
  prt i e = case e of
    OpAss -> prPrec i 0 (concatD [doc (showString "=")])
    OpAssPlus -> prPrec i 0 (concatD [doc (showString "+=")])
    OpAssMinus -> prPrec i 0 (concatD [doc (showString "-=")])
    OpAssTimes -> prPrec i 0 (concatD [doc (showString "*=")])
    OpAssDiv -> prPrec i 0 (concatD [doc (showString "/=")])
    OpAssMod -> prPrec i 0 (concatD [doc (showString "%=")])

