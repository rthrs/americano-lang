module Americano.Syntax where

-- Haskell module generated by the BNF converter

newtype Ident = Ident String deriving (Eq, Ord, Read)
instance Show Ident where
  show (Ident str) = show str

data Program = Prog [Phrase]
  deriving (Eq, Ord, Show, Read)

data Phrase = PDecl Decl | PStmt Stmt | PExpr Expr | PBlock Block
  deriving (Eq, Ord, Show, Read)

data Block = Block [Phrase]
  deriving (Eq, Ord, Show, Read)

data Decl = DVar TypeB [Item] | DFun TypeB Ident [DArg] Block
  deriving (Eq, Ord, Show, Read)

data Item = DNoInit Ident | DInit Ident Expr
  deriving (Eq, Ord, Show, Read)

data DArg = DArg TypeB Ident
  deriving (Eq, Ord, Show, Read)

data TypeB = TComplex TypeC | TPrimitive TypeP | Fun TypeB [TypeB]
  deriving (Eq, Ord, Show, Read)

data TypeP = TInt | TString | TBool | TVoid
  deriving (Eq, Ord, Show, Read)

data TypeC = TArray TypeB | TDict TypeDV TypeDK
  deriving (Eq, Ord, Show, Read)

data TypeDK = TDictKey TypeP
  deriving (Eq, Ord, Show, Read)

data TypeDV = TDictVal TypeB
  deriving (Eq, Ord, Show, Read)

data Stmt
    = SEmpty
    | SBreak
    | SContinue
    | SReturn
    | SValReturn Expr
    | SCond Expr Phrase
    | SCondElse Expr Phrase Phrase
    | SWhile Expr Phrase
    | SPrint Expr
  deriving (Eq, Ord, Show, Read)

data CInit = InitArrEmp | InitArr [Expr] | InitDict [DKeyVal]
  deriving (Eq, Ord, Show, Read)

data DKeyVal = DictKeyVal Expr Expr
  deriving (Eq, Ord, Show, Read)

data LVal = LVar Ident | LArr LVal Expr | LDict LVal Expr
  deriving (Eq, Ord, Show, Read)

data Expr
    = ELVal LVal
    | ECInit CInit
    | EIncr LVal
    | EDecr LVal
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | ELitString String
    | EApp Ident [Expr]
    | ENeg Expr
    | ENot Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
    | EAss LVal AssOp Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = OpPlus | OpMinus
  deriving (Eq, Ord, Show, Read)

data MulOp = OpTimes | OpDiv | OpMod
  deriving (Eq, Ord, Show, Read)

data RelOp = OpLt | OpLte | OpGt | OpGte | OpEq | OpNeq
  deriving (Eq, Ord, Show, Read)

data AssOp
    = OpAss | OpAssPlus | OpAssMinus | OpAssTimes | OpAssDiv | OpAssMod
  deriving (Eq, Ord, Show, Read)
